   //--------------------- spring security endpoints ------------------//


------- API Endpoints ----------

Register a User:
POST-: /api/users/register
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123",
  "email": "test@example.com",
  "firstName": "Test",
  "lastName": "User"
}
--------------------------------------

Login:
POST-: /api/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123"
}

---------------------------------

Get All Users (admin only):
GET-: /api/users
Authorization: Basic admin admin

------------------------------------

Get User by ID:
GET- /api/users/{id}
Authorization: Basic username password

---------------------------------------

Update User:
PUT-: /api/users/{id}
Content-Type: application/json
Authorization: Basic username password

{
  "firstName": "Updated",
  "lastName": "Name"
}

----------------------------------------

Change User Role (admin only):
PATCH /api/users/{id}/roles?role=ROLE_ADMIN&add=true
Authorization: Basic admin admin

-------------------------------------------------------
Toggle User Status (admin only):
PATCH /api/users/{id}/status
Authorization: Basic admin admin

------------------------------------------------------

Delete User (admin only):
DELETE-: /api/users/{id}
Authorization: Basic admin admin



-------------------------------------------------------


For the request: -  PATCH /api/users/{id}/status 
                    Basic Admin authentication, the expected output would be:

Response Status: HTTP 200 OK
Response Body: Empty (since the endpoint returns ResponseEntity.ok().build() which doesn't include a body)

What this endpoint does functionally:

It toggles the user's enabled status (from enabled to disabled or from disabled to enabled)
If the user was previously enabled (enabled = true), the status will be changed to disabled (enabled = false)
If the user was previously disabled (enabled = false), the status will be changed to enabled (enabled = true)

This is a common administrative action that allows admins to temporarily deactivate user accounts without deleting them. When a user is disabled (enabled = false), they won't be able to authenticate even with the correct credentials because the CustomUserDetailsService passes the enabled status to Spring Security's User object.
If the request fails for any reason (like if the user ID doesn't exist), you would instead receive:

A 404 Not Found response if the user doesn't exist
A 403 Forbidden if you're not authenticated as an admin

